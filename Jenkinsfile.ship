import groovy.json.JsonSlurperClassic
def payload = new groovy.json.JsonSlurperClassic().parseText(requestPayload)

pipeline {
    agent { node { label 'dockerslave' } }
    environment {
        NOTARY_OPTS = "-d /home/jenkins/.docker/trust -s https://${DTR_URL} --tlscacert /home/jenkins/.docker/tls/${DTR_URL}/ca.crt"
        REGISTRY_URL = "https://${DTR_REGISTRY}"
        SOURCE_IMAGE = "${payload.contents.sourceRepository}"
        SOURCE_TAG = "${payload.contents.sourceTag}"
        TARGET_IMAGE = "${payload.contents.targetRepository}"
        TARGET_TAG = "${payload.contents.targetTag}"
        }

    stages {
        stage('Pull Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ci-pipeline', passwordVariable: 'REGISTRY_PASS', usernameVariable: 'REGISTRY_USER')]) {
                    sh """
                        docker version
                        docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASS} ${REGISTRY_URL}
                        docker image pull ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}
                        docker image tag ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG} ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                        docker image push ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                    """
                }
            }
        }
    }

        stage('Sign Image') {
            steps {
                withCredentials([[$class: 'StringBinding', credentialsId: 'dct_root_passphrase', variable: 'ROOT_SIGNING_PASSPHRASE'],
                    [$class: 'StringBinding', credentialsId: 'dct_repo_passphrase', variable: 'REPOSITORY_SIGNING_PASSPHRASE'],
                    [$class: 'StringBinding', credentialsId: 'dct_delegation_passphrase', variable: 'DELEGATION_PASSPHRASE'],
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'ci-pipeline', usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS']]) {

                    withEnv(["DOCKER_CONTENT_TRUST=1",
                        "DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$ROOT_SIGNING_PASSPHRASE",
                        "DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$REPOSITORY_SIGNING_PASSPHRASE",
                        "NOTARY_ROOT_PASSPHRASE=$DELEGATION_PASSPHRASE",
                        "NOTARY_TARGETS_PASSPHRASE=$DELEGATION_PASSPHRASE",
                        "NOTARY_SNAPSHOT_PASSPHRASE=$DELEGATION_PASSPHRASE",
                        "NOTARY_DELEGATION_PASSPHRASE=$DELEGATION_PASSPHRASE",]) {
                        sh """
                            notary ${NOTARY_OPTS} key import /home/jenkins/key.pem
                            docker image tag ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG} ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                            docker image push ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                            docker trust inspect --pretty ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                        """
                    }
                }
            }
        }

    post {
        always {
            script {
                def summaryString = """\
                Promotion Summary:
                    Source Image Name: ${SOURCE_IMAGE}:${SOURCE_TAG}
                    Target Image Name: ${TARGET_IMAGE}:${TARGET_TAG}
                    Location: ${payload.location}""".stripIndent()
                currentBuild.displayName = "#${env.BUILD_NUMBER} - Triggered by PROMOTION webhook for ${SOURCE_IMAGE}:${SOURCE_TAG}"
                currentBuild.description = summaryString
            }
        }
    }
}
